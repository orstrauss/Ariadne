/**
 * Copyright (c) 2012 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Stephane Begaudeau (Obeo) - initial API and implementation
 */
package fr.obeo.ariadne.model.code.provider;

import fr.obeo.ariadne.model.code.util.CodeAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CodeItemProviderAdapterFactory extends CodeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CodeItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Component} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentItemProvider componentItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Component}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentAdapter()
  {
    if (componentItemProvider == null)
    {
      componentItemProvider = new ComponentItemProvider(this);
    }

    return componentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.ResourcesContainer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResourcesContainerItemProvider resourcesContainerItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.ResourcesContainer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createResourcesContainerAdapter()
  {
    if (resourcesContainerItemProvider == null)
    {
      resourcesContainerItemProvider = new ResourcesContainerItemProvider(this);
    }

    return resourcesContainerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.GenericResource} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GenericResourceItemProvider genericResourceItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.GenericResource}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGenericResourceAdapter()
  {
    if (genericResourceItemProvider == null)
    {
      genericResourceItemProvider = new GenericResourceItemProvider(this);
    }

    return genericResourceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.ClasspathEntry} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClasspathEntryItemProvider classpathEntryItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.ClasspathEntry}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createClasspathEntryAdapter()
  {
    if (classpathEntryItemProvider == null)
    {
      classpathEntryItemProvider = new ClasspathEntryItemProvider(this);
    }

    return classpathEntryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.TypesContainer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypesContainerItemProvider typesContainerItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.TypesContainer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypesContainerAdapter()
  {
    if (typesContainerItemProvider == null)
    {
      typesContainerItemProvider = new TypesContainerItemProvider(this);
    }

    return typesContainerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Classifier} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassifierItemProvider classifierItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Classifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createClassifierAdapter()
  {
    if (classifierItemProvider == null)
    {
      classifierItemProvider = new ClassifierItemProvider(this);
    }

    return classifierItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Field} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FieldItemProvider fieldItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Field}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFieldAdapter()
  {
    if (fieldItemProvider == null)
    {
      fieldItemProvider = new FieldItemProvider(this);
    }

    return fieldItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Constructor} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstructorItemProvider constructorItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Constructor}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConstructorAdapter()
  {
    if (constructorItemProvider == null)
    {
      constructorItemProvider = new ConstructorItemProvider(this);
    }

    return constructorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Operation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationItemProvider operationItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Operation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOperationAdapter()
  {
    if (operationItemProvider == null)
    {
      operationItemProvider = new OperationItemProvider(this);
    }

    return operationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Parameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterItemProvider parameterItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Parameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParameterAdapter()
  {
    if (parameterItemProvider == null)
    {
      parameterItemProvider = new ParameterItemProvider(this);
    }

    return parameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Annotation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnnotationItemProvider annotationItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Annotation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAnnotationAdapter()
  {
    if (annotationItemProvider == null)
    {
      annotationItemProvider = new AnnotationItemProvider(this);
    }

    return annotationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.AnnotationField} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnnotationFieldItemProvider annotationFieldItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.AnnotationField}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAnnotationFieldAdapter()
  {
    if (annotationFieldItemProvider == null)
    {
      annotationFieldItemProvider = new AnnotationFieldItemProvider(this);
    }

    return annotationFieldItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.ReferencedService} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReferencedServiceItemProvider referencedServiceItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.ReferencedService}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createReferencedServiceAdapter()
  {
    if (referencedServiceItemProvider == null)
    {
      referencedServiceItemProvider = new ReferencedServiceItemProvider(this);
    }

    return referencedServiceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.ProvidedService} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProvidedServiceItemProvider providedServiceItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.ProvidedService}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProvidedServiceAdapter()
  {
    if (providedServiceItemProvider == null)
    {
      providedServiceItemProvider = new ProvidedServiceItemProvider(this);
    }

    return providedServiceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link fr.obeo.ariadne.model.code.Environment} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnvironmentItemProvider environmentItemProvider;

  /**
   * This creates an adapter for a {@link fr.obeo.ariadne.model.code.Environment}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnvironmentAdapter()
  {
    if (environmentItemProvider == null)
    {
      environmentItemProvider = new EnvironmentItemProvider(this);
    }

    return environmentItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (componentItemProvider != null) componentItemProvider.dispose();
    if (resourcesContainerItemProvider != null) resourcesContainerItemProvider.dispose();
    if (genericResourceItemProvider != null) genericResourceItemProvider.dispose();
    if (classpathEntryItemProvider != null) classpathEntryItemProvider.dispose();
    if (typesContainerItemProvider != null) typesContainerItemProvider.dispose();
    if (classifierItemProvider != null) classifierItemProvider.dispose();
    if (fieldItemProvider != null) fieldItemProvider.dispose();
    if (constructorItemProvider != null) constructorItemProvider.dispose();
    if (operationItemProvider != null) operationItemProvider.dispose();
    if (parameterItemProvider != null) parameterItemProvider.dispose();
    if (annotationItemProvider != null) annotationItemProvider.dispose();
    if (annotationFieldItemProvider != null) annotationFieldItemProvider.dispose();
    if (referencedServiceItemProvider != null) referencedServiceItemProvider.dispose();
    if (providedServiceItemProvider != null) providedServiceItemProvider.dispose();
    if (environmentItemProvider != null) environmentItemProvider.dispose();
  }

}
