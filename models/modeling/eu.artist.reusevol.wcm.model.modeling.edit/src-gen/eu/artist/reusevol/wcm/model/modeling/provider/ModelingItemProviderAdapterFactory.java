/**
 * Copyright (c) 2014 ARTIST Project.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Oliver Strauﬂ (Fraunhofer IAO) - Modeling extension
 *     Stephane Begaudeau (Obeo)      - Initial framework
 */
package eu.artist.reusevol.wcm.model.modeling.provider;

import eu.artist.reusevol.wcm.model.modeling.util.ModelingAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelingItemProviderAdapterFactory extends ModelingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelingItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.Entity} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityItemProvider entityItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.Entity}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEntityAdapter()
  {
    if (entityItemProvider == null)
    {
      entityItemProvider = new EntityItemProvider(this);
    }

    return entityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.Model} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelItemProvider modelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.Model}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModelAdapter()
  {
    if (modelItemProvider == null)
    {
      modelItemProvider = new ModelItemProvider(this);
    }

    return modelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.ReferenceModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReferenceModelItemProvider referenceModelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.ReferenceModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createReferenceModelAdapter()
  {
    if (referenceModelItemProvider == null)
    {
      referenceModelItemProvider = new ReferenceModelItemProvider(this);
    }

    return referenceModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.MetaMetaModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MetaMetaModelItemProvider metaMetaModelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.MetaMetaModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMetaMetaModelAdapter()
  {
    if (metaMetaModelItemProvider == null)
    {
      metaMetaModelItemProvider = new MetaMetaModelItemProvider(this);
    }

    return metaMetaModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.MetaModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MetaModelItemProvider metaModelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.MetaModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMetaModelAdapter()
  {
    if (metaModelItemProvider == null)
    {
      metaModelItemProvider = new MetaModelItemProvider(this);
    }

    return metaModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.TerminalModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TerminalModelItemProvider terminalModelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.TerminalModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTerminalModelAdapter()
  {
    if (terminalModelItemProvider == null)
    {
      terminalModelItemProvider = new TerminalModelItemProvider(this);
    }

    return terminalModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.WeavingModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WeavingModelItemProvider weavingModelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.WeavingModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWeavingModelAdapter()
  {
    if (weavingModelItemProvider == null)
    {
      weavingModelItemProvider = new WeavingModelItemProvider(this);
    }

    return weavingModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.TransformationModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransformationModelItemProvider transformationModelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.TransformationModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransformationModelAdapter()
  {
    if (transformationModelItemProvider == null)
    {
      transformationModelItemProvider = new TransformationModelItemProvider(this);
    }

    return transformationModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.MegaModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MegaModelItemProvider megaModelItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.MegaModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMegaModelAdapter()
  {
    if (megaModelItemProvider == null)
    {
      megaModelItemProvider = new MegaModelItemProvider(this);
    }

    return megaModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.Relationship} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationshipItemProvider relationshipItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.Relationship}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRelationshipAdapter()
  {
    if (relationshipItemProvider == null)
    {
      relationshipItemProvider = new RelationshipItemProvider(this);
    }

    return relationshipItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.Transformation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransformationItemProvider transformationItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.Transformation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransformationAdapter()
  {
    if (transformationItemProvider == null)
    {
      transformationItemProvider = new TransformationItemProvider(this);
    }

    return transformationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link eu.artist.reusevol.wcm.model.modeling.TransformationRecord} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransformationRecordItemProvider transformationRecordItemProvider;

  /**
   * This creates an adapter for a {@link eu.artist.reusevol.wcm.model.modeling.TransformationRecord}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransformationRecordAdapter()
  {
    if (transformationRecordItemProvider == null)
    {
      transformationRecordItemProvider = new TransformationRecordItemProvider(this);
    }

    return transformationRecordItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (entityItemProvider != null) entityItemProvider.dispose();
    if (modelItemProvider != null) modelItemProvider.dispose();
    if (referenceModelItemProvider != null) referenceModelItemProvider.dispose();
    if (metaMetaModelItemProvider != null) metaMetaModelItemProvider.dispose();
    if (metaModelItemProvider != null) metaModelItemProvider.dispose();
    if (terminalModelItemProvider != null) terminalModelItemProvider.dispose();
    if (weavingModelItemProvider != null) weavingModelItemProvider.dispose();
    if (transformationModelItemProvider != null) transformationModelItemProvider.dispose();
    if (megaModelItemProvider != null) megaModelItemProvider.dispose();
    if (relationshipItemProvider != null) relationshipItemProvider.dispose();
    if (transformationItemProvider != null) transformationItemProvider.dispose();
    if (transformationRecordItemProvider != null) transformationRecordItemProvider.dispose();
  }

}
